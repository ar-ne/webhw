plugins {
    id 'org.asciidoctor.convert' version '1.5.3'
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'java'
    id 'nu.studer.jooq' version '3.0.3'
}

apply plugin: 'io.spring.dependency-management'

group = 'nchu.162012322'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
    maven { url 'https://maven.aliyun.com/repository/spring/' }
}

ext {
    set('snippetsDir', file('build/generated-snippets'))
}

dependencies {
    implementation project(':wpack')
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.0.1'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compile "org.springframework.boot:spring-boot-starter-security"
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    jooqRuntime 'mysql:mysql-connector-java'
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}
allprojects {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
    }
}

def application = new Properties()
file("src/main/resources/application.properties").withInputStream { application.load(it) }
jooq {
    webhw(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.cj.jdbc.Driver'
            url = application.getProperty("spring.datasource.url")
            user = application.getProperty("spring.datasource.username")
            password = application.getProperty("spring.datasource.password")
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = null
                matchers {
                    tables {
                        table {
                            expression = '[Cc]ustomer|[Mm]anager|[Ss]taff'
                            pojoExtends = 'nchu2.webhw.model.User'
                        }
                    }
                }
            }
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = 'webhw'
                forcedTypes {
                    forcedType {
                        userType = 'nchu2.webhw.properites.UserType'
                        converter = 'nchu2.webhw.properites.UserType.Converter'
                        expression = 'webhw.Login.type'
                        types = '.*'
                    }
                }
            }
            generate {
                daos = true
                pojos = true
                relations = true
                deprecated = false
                records = true
                immutablePojos = false
                fluentSetters = true
            }
            target {
                packageName = 'nchu2.webhw.model'
            }
        }
    }
}

task cleanOut(type: Delete) {
    delete("out")
}
rootProject.tasks.getByName('clean').dependsOn cleanOut